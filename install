#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os
import subprocess
import shutil
import platform
import stat

def p_wrap(pstring):
    """Prints a string with word-wrap to terminal column size."""
    try:
        term_cols = os.get_terminal_size().columns
    except OSError:
        term_cols = 40  # Default width for narrow screens

    while len(pstring) > term_cols:
        print(pstring[:pstring[:term_cols].rfind(" ")])
        pstring = pstring[len(pstring[:pstring[:term_cols].rfind(" ")]):]

    print(pstring)

def make_executable(path):
    """Make a file executable."""
    mode = os.stat(path).st_mode
    mode |= (mode & 0o444) >> 2  # Copy read bits to execute
    os.chmod(path, mode)

def is_installed(command):
    """Check if a command is available on the system."""
    try:
        subprocess.run([command, "--version"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        return False

def install_dependencies():
    """Detect OS and install missing dependencies."""

    system = platform.system().lower()
    termux = "termux" in sys.prefix

    # Check dependencies
    missing_packages = []

    if not is_installed("pandoc"):
        missing_packages.append("pandoc")
    if not is_installed("detex"):
        missing_packages.append("texlive-extra-utils")
    if not is_installed("aspell") and not is_installed("hunspell"):
        missing_packages.append("aspell or hunspell")

    if not missing_packages:
        p_wrap("All required dependencies are installed.")
        return True

    p_wrap(f"Missing dependencies: {', '.join(missing_packages)}")

    install_cmd = []

    if system == "linux":
        distro = platform.linux_distribution()[0].lower() if hasattr(platform, "linux_distribution") else ""

        if "ubuntu" in distro or "debian" in distro:
            install_cmd = ["sudo", "apt", "update", "&&", "sudo", "apt", "install", "-y"]
            if "pandoc" in missing_packages:
                install_cmd.append("pandoc")
            if "texlive-extra-utils" in missing_packages:
                install_cmd.append("texlive-extra-utils")
            if "aspell or hunspell" in missing_packages:
                install_cmd.append("aspell")

        elif "fedora" in distro:
            install_cmd = ["sudo", "dnf", "install", "-y"]
            if "pandoc" in missing_packages:
                install_cmd.append("pandoc")
            if "texlive-extra-utils" in missing_packages:
                install_cmd.append("texlive-detex")
            if "aspell or hunspell" in missing_packages:
                install_cmd.append("aspell")

        elif "arch" in distro:
            install_cmd = ["sudo", "pacman", "-S", "--noconfirm"]
            if "pandoc" in missing_packages:
                install_cmd.append("pandoc")
            if "texlive-extra-utils" in missing_packages:
                install_cmd.append("texlive-bin")
            if "aspell or hunspell" in missing_packages:
                install_cmd.append("aspell")

        elif termux:
            install_cmd = ["pkg", "install", "-y"]
            if "pandoc" in missing_packages:
                install_cmd.append("pandoc")
            if "texlive-extra-utils" in missing_packages:
                install_cmd.append("texlive")
            if "aspell or hunspell" in missing_packages:
                install_cmd.append("hunspell")

        else:
            p_wrap("Unsupported Linux distribution. Please install Pandoc, Detex, and Aspell manually.")
            return False

    elif system == "darwin":
        install_cmd = ["brew", "install"]
        if "pandoc" in missing_packages:
            install_cmd.append("pandoc")
        if "texlive-extra-utils" in missing_packages:
            install_cmd.append("texlive")
        if "aspell or hunspell" in missing_packages:
            install_cmd.append("aspell")

    elif system == "windows":
        p_wrap("Windows detected. Please install Pandoc and TeX Live manually:")
        p_wrap("Pandoc: https://pandoc.org/installing.html")
        p_wrap("TeX Live (for Detex): https://www.tug.org/texlive/")
        return False

    else:
        p_wrap("Unknown OS. Please install Pandoc, Detex, and Aspell manually.")
        return False

    p_wrap(f"ðŸš€ Installing missing dependencies: {' '.join(install_cmd)}")
    try:
        subprocess.run(" ".join(install_cmd), shell=True, check=True)
        p_wrap("Installation completed successfully!")
        return True
    except subprocess.CalledProcessError:
        p_wrap("Installation failed. Please install the dependencies manually.")
        return False

def copy_common_words():
    """Copy commonwords.txt to ~/.indexmeister/commonwords.txt, creating the directory if necessary."""
    destination_dir = os.path.expanduser("~/.indexmeister")
    os.makedirs(destination_dir, exist_ok=True)
    shutil.copy("commonwords.txt", os.path.join(destination_dir, "commonwords.txt"))
    p_wrap("commonwords.txt copied successfully!")

if __name__ == "__main__":
    if install_dependencies():
        copy_common_words()
