#! /usr/bin/env python3
# -*- coding: utf-8 -*-

'''Utility to help index LaTeX books by suggesting possible index terms.
   Copyright 2015-2018 by Kevin A. Straight <longhunt@yahoo.com> under the
   terms of the GNU public license. Adapted for Python 3.'''   

import string
import subprocess
import sys
import os
import argparse
import re

VERSION_CODE = "0.40"  # current version of indexmeister

# Function to load common words from external file
def load_common_words():
    common_words_file = "commonwords.txt"
    home_common_words_file = os.path.expanduser("~/.indexmeister/commonwords.txt")
    
    if os.path.exists(home_common_words_file):
        common_words_file = home_common_words_file
    elif not os.path.exists(common_words_file):
        print("WARNING: commonwords.txt not found, proceeding without filtering common words.")
        return set()
    
    with open(common_words_file, "r", encoding="utf-8") as file:
        return set(word.strip().lower() for word in file if word.strip())

# Load common words from external file
common500 = load_common_words()

# Thresholds for word frequency analysis
w_threshold = 0.0028429284  # Normalized word frequency threshold
w_sensitivity = 5

# Argument parsing
parser = argparse.ArgumentParser(description="Indexmeister - Suggests index terms for LaTeX books.")
parser.add_argument("filename", help="Path to the LaTeX file to process")
parser.add_argument("-d", action="store_true", help="Suggest terms not in the system dictionary")
parser.add_argument("-f", action="store_true", help="Suggest words based on frequency of occurrence")
parser.add_argument("-x", action="store_true", help="Use Pandoc even if Detex is available")
parser.add_argument("-E", action="store_true", help="Exclude LaTeX commands, citations, and environments")

args = parser.parse_args()
filename = args.filename

# Ensure detex is installed
useDetex = False
try:
    subprocess.run(["detex", "--version"], check=True, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
    useDetex = True
except (subprocess.CalledProcessError, FileNotFoundError):
    pass

if not useDetex:
    try:
        subprocess.run(["pandoc", "--version"], check=True, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("ERROR: Either 'detex' or 'pandoc' is required but not found.")
        print("Ensure they are installed and accessible.")
        sys.exit(1)

output_words = []

# Read LaTeX file and remove commands, citations, and environments if '-E' is enabled
with open(filename, "r", encoding="utf-8") as rf:
    rawtex = rf.read()

if args.E:
    rawtex = re.sub(r"\\\\[a-zA-Z]+\{[^}]*\}", "", rawtex)  # Remove LaTeX commands
    rawtex = re.sub(r"~\\cite\{[^}]*\}", "", rawtex)  # Remove citations
    rawtex = re.sub(r"\\label\{[^}]*\}", "", rawtex)  # Remove labels
    rawtex = re.sub(r"\\begin\{[^}]*\}.*?\\end\{[^}]*\}", "", rawtex, flags=re.DOTALL)  # Remove LaTeX environments

# Extract words using Detex first, then Pandoc if unavailable
command = ["detex", filename] if useDetex else ["pandoc", "-t", "plain", filename]
try:
    result = subprocess.run(command, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    rawtext = result.stdout.strip()
    if not rawtext:
        print("ERROR: No text extracted. Check if the file exists and is a valid LaTeX document.")
        sys.exit(1)
except subprocess.CalledProcessError as e:
    print(f"ERROR: Failed to extract text from LaTeX file. {e.stderr.strip()}")
    sys.exit(1)

rawtext = rawtext.replace("—", "; ").replace("–", ": ").replace("’", "").split()

# Identify unique words and phrases, including capitalized words
for i in range(len(rawtext)):
    phrase = rawtext[i].strip(".;:,-""!?')\"()&")  # Remove unwanted characters
    if phrase.endswith("'s"):
        phrase = phrase[:-2]
    if phrase and phrase.lower() not in common500 and phrase not in output_words:
        output_words.append(phrase)

# Use spell-checker if '-d' is in options
if args.d:
    try:
        checker = f"detex {filename} | aspell list" if useDetex else f"pandoc -t plain {filename} | aspell list"
        wordlist = subprocess.run(checker, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, text=True).stdout.split()
        output_words.extend(set(wordlist) - set(output_words))
    except subprocess.CalledProcessError:
        pass

# Identify words occurring more frequently than expected if '-f' is in options
if args.f:
    wordcounts = {}
    for w in rawtext:
        w_clean = "".join([c for c in w if c not in string.punctuation]).lower()
        if w_clean and w_clean not in common500:
            wordcounts[w_clean] = wordcounts.get(w_clean, 0) + 1
    
    max_freq = max(wordcounts.values()) if wordcounts else 1
    for word, count in wordcounts.items():
        cleaned_word = word.strip("\"()&-")  # Remove unwanted characters
        if count / max_freq > w_threshold * w_sensitivity and 5 < count < 50:
            if cleaned_word not in output_words:
                output_words.append(cleaned_word)

# Output sorted unique words excluding common stop words
output_words = sorted(set(output_words))
for word in output_words:
    print(word)
